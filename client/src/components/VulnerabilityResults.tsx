import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, Bug, Info, Clock } from "lucide-react";

interface VulnerabilityResultsProps {
  scanId: number | null;
}

interface Vulnerability {
  id: number;
  severity: string;
  type: string;
  parameter: string;
  payload: string;
  description: string;
  cvssScore?: string;
  endpoint: string;
  detectedAt: string;
}

interface ScanResult {
  id: number;
  targetId: number;
  status: string;
  progress: number;
  vulnerabilities: Vulnerability[];
  startedAt: string;
  completedAt?: string;
}

export default function VulnerabilityResults({ scanId }: VulnerabilityResultsProps) {
  const { data: scanResult, isLoading } = useQuery<ScanResult>({
    queryKey: ["/api/scans/results", scanId],
    refetchInterval: scanId ? 3000 : false, // Poll every 3 seconds if scanId exists
    enabled: !!scanId,
  });

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <AlertTriangle className="text-cyber-red" size={16} />;
      case "high":
        return <AlertTriangle className="text-cyber-amber" size={16} />;
      case "medium":
        return <Bug className="text-orange-400" size={16} />;
      case "low":
        return <Info className="text-blue-400" size={16} />;
      default:
        return <Info className="text-gray-400" size={16} />;
    }
  };

  const getSeverityClass = (severity: string) => {
    switch (severity) {
      case "critical":
        return "severity-critical";
      case "high":
        return "severity-high";
      case "medium":
        return "severity-medium";
      case "low":
        return "severity-low";
      default:
        return "severity-info";
    }
  };

  const getSeverityBadgeClass = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-600 text-red-100";
      case "high":
        return "bg-yellow-600 text-yellow-100";
      case "medium":
        return "bg-orange-600 text-orange-100";
      case "low":
        return "bg-blue-600 text-blue-100";
      default:
        return "bg-gray-600 text-gray-100";
    }
  };

  if (!scanId) {
    return (
      <Card className="cyber-card">
        <CardHeader>
          <CardTitle className="flex items-center text-white">
            <Bug className="text-red-500 mr-3" size={20} />
            Live Vulnerabilities
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center text-gray-400 py-8">
            <Bug className="mx-auto mb-4 text-gray-600" size={48} />
            <p>Start a security assessment to see live vulnerability detection results.</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (isLoading) {
    return (
      <Card className="cyber-card">
        <CardHeader>
          <CardTitle className="flex items-center text-white">
            <Bug className="text-red-500 mr-3" size={20} />
            Live Vulnerabilities
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center text-gray-400">Loading vulnerability results...</div>
        </CardContent>
      </Card>
    );
  }

  const vulnerabilities = scanResult?.vulnerabilities || [];

  return (
    <Card className="cyber-card">
      <CardHeader>
        <CardTitle className="flex items-center justify-between text-white">
          <div className="flex items-center">
            <Bug className="text-red-500 mr-3" size={20} />
            Live Vulnerabilities
          </div>
          {scanResult?.status === "running" && (
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-cyber-green rounded-full animate-pulse"></div>
              <span className="text-sm text-cyber-green">Scanning</span>
            </div>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent>
        {vulnerabilities.length === 0 ? (
          <div className="text-center text-gray-400 py-8">
            {scanResult?.status === "running" ? (
              <>
                <div className="animate-pulse-slow mb-4">
                  <Bug className="mx-auto text-gray-600" size={48} />
                </div>
                <p>Scanning for vulnerabilities...</p>
                <p className="text-sm mt-2">
                  Progress: {scanResult.progress}% - No vulnerabilities detected yet.
                </p>
              </>
            ) : (
              <>
                <Bug className="mx-auto mb-4 text-gray-600" size={48} />
                <p>No vulnerabilities detected in this scan.</p>
              </>
            )}
          </div>
        ) : (
          <div className="space-y-4 max-h-96 overflow-y-auto">
            {vulnerabilities.map((vulnerability) => (
              <div
                key={vulnerability.id}
                className={`border rounded-lg p-4 ${getSeverityClass(vulnerability.severity)}`}
              >
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    {getSeverityIcon(vulnerability.severity)}
                    <Badge className={getSeverityBadgeClass(vulnerability.severity)}>
                      {vulnerability.severity.toUpperCase()}
                    </Badge>
                  </div>
                  <span className="text-xs text-gray-400 flex items-center">
                    <Clock size={12} className="mr-1" />
                    {new Date(vulnerability.detectedAt).toLocaleTimeString()}
                  </span>
                </div>
                
                <h4 className="font-semibold text-sm mb-1">
                  {vulnerability.type.split('-').map(word => 
                    word.charAt(0).toUpperCase() + word.slice(1)
                  ).join(' ')} SQL Injection
                </h4>
                
                <p className="text-xs mb-2 opacity-90">
                  {vulnerability.description}
                </p>
                
                <div className="space-y-1 text-xs">
                  <div>
                    <span className="opacity-70">Parameter:</span>
                    <span className="font-mono ml-1 bg-black/20 px-1 rounded">
                      {vulnerability.parameter}
                    </span>
                  </div>
                  
                  <div>
                    <span className="opacity-70">Endpoint:</span>
                    <span className="font-mono ml-1 text-cyan-300 break-all">
                      {vulnerability.endpoint}
                    </span>
                  </div>
                  
                  {vulnerability.cvssScore && (
                    <div>
                      <span className="opacity-70">CVSS Score:</span>
                      <span className="font-semibold ml-1">{vulnerability.cvssScore}</span>
                    </div>
                  )}
                  
                  <details className="mt-2">
                    <summary className="cursor-pointer opacity-70 hover:opacity-100">
                      View Payload
                    </summary>
                    <code className="block mt-1 p-2 bg-black/30 rounded text-xs font-mono break-all">
                      {vulnerability.payload}
                    </code>
                  </details>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
